SieveModel: rules*=Rule ;

Rule:
  'if' expr=Expression '{'
    actions*=Action[';']
  '}'
;

Expression: conj=Conjunction ('||' conj=Conjunction)*;
Conjunction: cond=Condition ('&&' cond=Condition)*;
Condition:
    match=StringMatch
    | match=NumericMatch
    | match=ExistMatch
    | ( '(' match=Expression ')' )
;


StringMatch: key=Key op=StringOperator value=Value;
StringOperator:
  '=='           // compares two whole strings with each other
  | '!='         // test for string inequality
  | ':contains'  // sub-string match
  | '=~'         // match strings according to regular expression
  | '!~'         // inverse match with regular expression
;

NumericMatch: key=Key op=NumericOperator value=NUMBER;
NumericOperator:
  '=='          // equal
  | '!='        // not equal
  | '<'         // less than
  | '<='        // less than or equal
  | '>'         // greater than
  | '>='        // greater than or equal
;

ExistMatch: op=ExistOperator key=STRING;
ExistOperator: ':exists' | ':notexists';

Key: /[a-z_.]+/;

Value: SingleValue | ValueList ;
SingleValue: value=STRING ;
ValueList: '[' values+=SingleValue[','] ']' ;


Action: FilteringAction | AddAction | AddForceAction | ModifyAction | RemoveAction;

FilteringAction:
  'drop' | 'keep'
;


AddAction: 'add' key=Key '=' value=STRING;
AddForceAction: 'add!' key=Key '=' value=STRING;
ModifyAction: 'modify' key=Key '=' value=STRING;
RemoveAction: 'remove' key=Key;

Comment:
  /(\/\/.*$)|(\/\*.*\*\/)/  // TODO: // line comments and /* block comments */, figure out the right regex
;